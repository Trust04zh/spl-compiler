CC = g++
FLEX = flex
BISON = bison

PRODUCT_DIRECTORY = .

# source files for lexer
SPL_LEXER_BODY_L = spl-lexer-body.l
SPL_LEXER_MODULE_CPP = spl-lexer-module.cpp
SPL_LEXER_STANDALONE_CPP = spl-lexer-standalone.cpp

# target files for lexer
SPL_LEXER_BODY_CPP = $(PRODUCT_DIRECTORY)/spl-lexer-body.cpp
SPL_LEXER_STANDALONE_OUT = $(PRODUCT_DIRECTORY)/spl-lexer-standalone

# source files for parser
SPL_PARSER_BODY_Y = spl-parser-body.y
SPL_PARSER_STANDALONE_CPP = spl-parser-standalone.cpp
SPL_AST_HPP = spl-ast.hpp
SPL_AST_CPP = spl-ast.cpp

# target files for parser
SPL_PARSER_BODY_CPP = $(PRODUCT_DIRECTORY)/spl-parser-body.cpp
SPL_PARSER_BODY_HPP = $(PRODUCT_DIRECTORY)/spl-parser-body.hpp
SPL_PARSER_BODY_LOG = $(PRODUCT_DIRECTORY)/spl-parser-body.output
SPL_PARSER_STANDALONE_OUT = $(PRODUCT_DIRECTORY)/spl-parser-standalone

$(SPL_LEXER_BODY_CPP): $(SPL_LEXER_BODY_L)
	$(FLEX) -o $(SPL_LEXER_BODY_CPP) $(SPL_LEXER_BODY_L)

$(SPL_LEXER_STANDALONE_OUT): $(SPL_LEXER_BODY_CPP) $(SPL_LEXER_STANDALONE_CPP)
	$(CC) $(SPL_LEXER_STANDALONE_CPP) -lfl -o $(SPL_LEXER_STANDALONE_OUT)

$(SPL_PARSER_BODY_CPP): $(SPL_PARSER_BODY_Y) $(SPL_LEXER_MODULE_CPP) $(SPL_LEXER_BODY_CPP)
	$(BISON) -t --report=state --report-file=$(SPL_PARSER_BODY_LOG) --defines=$(SPL_PARSER_BODY_HPP) \
		-o $(SPL_PARSER_BODY_CPP) $(SPL_PARSER_BODY_Y)

$(SPL_PARSER_STANDALONE_OUT): $(SPL_PARSER_BODY_CPP) $(SPL_PARSER_STANDALONE_CPP) $(SPL_AST_HPP)
	$(CC) -g $(SPL_PARSER_STANDALONE_CPP) -lfl -ly -o $(SPL_PARSER_STANDALONE_OUT)

.PHONY: clean
clean:
	rm -f $(SPL_LEXER_BODY_CPP) $(SPL_LEXER_MODULE_OUT) $(SPL_LEXER_STANDALONE_OUT) \
		$(SPL_PARSER_BODY_CPP) $(SPL_PARSER_BODY_HPP) $(SPL_PARSER_BODY_LOG) \
		$(SPL_PARSER_STANDALONE_OUT)


